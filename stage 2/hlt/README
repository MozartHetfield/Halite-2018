			    HALITE II - ROUND II
    		  - fighting against a single enemy - basic bot -

	
	Ideea pe care se bazeaza rezultatele este una banala, bazata pe mai multe
observatii (si pe faptul ca un incercarile unui algoritm exhaustiv a dat roade
pe maximum 2 teste simultan), si anume:
	- cu cat mai multe nave se afla in procesul de dock pe o planeta, cu atat
	  se vor spama mai multe si vor asalta numeros;
	- la ciocnirea a doua nave, fiecare va fi distrusa (plasarea simultana pe
	  aceeasi pozitie a hartii a centrului fiecarei nave), iar daca se afla in
	  raza alteia inamice, isi vor da damage fix la un interval bine definit;
	- daca o nava inamica se afla in raza a doua nave aliate, damage-ul navei
	  inamice se va imparti la cele 2 (unde-s multi puterea creste!);

	Asadar, algoritmul se bazeaza pe rush-ul navelor catre cele adversare, care
sunt setate sa faca dock pe cea mai apropiata planeta in incpipitul jocului. In-
trucat numarul de nave al fiecarui player va fi acelasi la inceput, trebuie pro-
fitat de observatiile enumerate mai sus. Astfel, atacul navelor trebuie sa fie unul
controlat, fara sa se indrepte catre centrul uneia adverse, rezultand in distrugerea
amandurora si eventuala victorie a bot-ului datorita unei nave rezultate din dock.
	Dupa numeroase incercari, a fost creata functia returnMagicPosition din GameMap,
care primeste ca argument nava care trebuie atacata si returneaza o pozitie ce 
ghideaza nava aliata in jurul acesteia, profitand, astfel, de starea sa de dock
si de nepregatirea botului pe situatia initiala.
	Tot ce a ramas de aflat pentru a pune in practica algoritmul sunt chiar
target-urile noastre, ship-urile inamice. In acest sens a fost facuta functia
getEnemy() din GameMap, ce functioneaza doar in cazul in care lupta este de 1vs1,
si gaseste tipul Player al botului. Deoarece ships-urile sunt tinute sub forma de
Map, am facut functia getShipsInArray din clasa Player, ce converteste Map-ul
respectiv intr-un ArrayList<Ship>. Timpul costa puncte si nu trebuie intarziat
niciun atac in niciun fel. De aceea viteza s-a modificat pe cea maxima, iar
abordarea navelor inamice se face in ordinea distantei minime catre acestea.
Deci, s-a facut un comparator ce sorteaza crescator in functie de distanta, ce
va fi apelat la fiecare parcurgere a for-ului de nave astfel incat fiecare
ship sa se indrepte catre adversarul cel mai apropiat.
